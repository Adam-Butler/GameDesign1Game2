<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Hero_Sprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.2
Face_Direction = 1;
normalSpeed = 8
jumpSpeed = 23
normalGravity = 1.5
Collionstate = "ground"
Roll_Shooting = "false"
Hurt_State = "false"
state = "stand"
PowerUp = 0
depth = -1
visible = true
Health = 50
hsp = 0; 
vsp = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check for Inputs. Returns a 1 if pressed, is 0 otherwise. 
leftKey = -keyboard_check(vk_left); //Negative
rightKey = keyboard_check(vk_right);
upKey = keyboard_check(vk_up);
downKey = keyboard_check(vk_down);
spaceKey = keyboard_check_pressed(vk_space);
zKey = keyboard_check_pressed(ord("Z"));
xKey = keyboard_check_pressed(ord("X"));

Face_Direction = leftKey + rightKey; //Cancels out if both are pressed
hsp = Face_Direction * normalSpeed; 

if(vsp &lt; 10){
    vsp += normalGravity;
}
if(place_meeting(x, y+1, Wall_Object)){ //is floor under me?
    vsp = xKey * -jumpSpeed;
}

if(place_meeting(x + hsp, y, Wall_Object)){
    while(!place_meeting(x + sign(hsp), y, Wall_Object)){ //sign() returns positive or negative 1. this is so that "left" (and) "right" collisions will work
        x += sign(hsp); 
    }
    hsp = 0; 
}

if(place_meeting(x, y + vsp, Wall_Object)){
    while(!place_meeting(x, y + sign(vsp), Wall_Object)){ 
        y += sign(vsp); 
    }
    vsp = 0; 
}
hspeed = hsp; 
vspeed = vsp; 

if(Face_Direction != 0){
    image_xscale = Face_Direction; //Flips sprite along its y axis. 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
